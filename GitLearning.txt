git init 
# Инициализация нового git-репозитория


git add .
# Индексация (включение в будущий ближайший коммит) всех файлов перед коммитом


git add filename.txt
# Индексация (включение в будущий ближайший коммит) всех файлов перед коммитом


git add .
git reset -- path/file.cpp
# Индексировать все файлы кроме файла "file.cpp", лежащего в "path"


git add .
git reset -- mydir
# Индексировать все файлы кроме файлов, лежащих в "mydir"


git checkout -- path/file.cpp
# Отменить изменения файла "file.cpp", лежащего в "path"
# До коммита


git checkout -- .
# Отменить изменения всех файлов
# До коммита


git commit -m "Текст коммита"
# Фиксация изменений


git commit --amend -m "Исправленный текст"
# Исправить текст последнего коммита
# До команды push


git commit -a --amend
# Добавить к последнему коммиту новые изменения


git reset --soft HEAD^
# Отменить последний коммит 
# Но не изменения, которые вы внесли, они сохранятся.


git reset --hard HEAD^
# Удалить полностью последний коммит
# ВСЕ правки, которые не были закоммиченны тоже будут удалены


git branch
# Список веток


git branch -v
# Список веток с указанием последнего коммита


git checkout master
git branch --merged
# Список веток, которые уже были слиты в текущую ветку 
# В данном случае ветку мастер


git checkout master
git branch --no-merged
# Список веток, которые ещё не были слиты в текущую ветку 
# В данном случае ветку мастер


git branch newBranch
# Создаст ветку newBranch


git branch -d testing
# Удалить ветку testing
# Может возникнуть ошибка, что ветка ещё ни с чем не слита


git branch -D testing
# Удалить ветку testing ПРИНУДИТЕЛЬНО
# Игнорирует ошибку, что ветка ещё ни с чем не слита


git branch --contains 3acd81e47d94e9df0b2ec25d49c82100543973be
# Получить список веток, включающих указанный коммит


git branch --merged master -a
# Получить список веток, которые уже слиты с мастером
# -a - этот ключ указывает на то, что показать в том числе и remote branch


git checkout -b newBranch
git branch -u origin/newBranch
# Связать существующую ветку с веткой на удалённом репозитории


git checkout master
# Выбор существующей ветки master


git checkout -b newBranch
# Две предыдущие команды можно заменить одной такой
# Т.е. будет создана новая ветка и сразу же выбрана


git log
# Список всех выполненных коммитов для текущей ветке
#
# Для прекращения просмотра списка, нажать 'q' (должна быть включена английская раскладка)


git log branchName
# Список всех выполненных коммитов для ветки branchName
#
# Для прекращения просмотра списка, нажать 'q' (должна быть включена английская раскладка)


git log --pretty=oneline
# Вывод информации о коммитах в кратком виде


git push origin master
# Залить изменения на ветку master, сервера origin


git push -u origin master
# Залить изменения на ветку master, сервера origin
# -u (or --set-upstream) ключ, указывающий на то, что связать текущую ветку с удалённой


git checkout branchOfAdmin
git push origin branchOfAdmin
# Создать ветку branchOfAdmin на удалённом репозитории и сразу же залить изменения из локальной ветки branchOfAdmin.
# Ветка branchOfAdmin должна быть предварительно выбрана.


git remote add origin https://github.com/mouse71rus/GitLearning.git
# Настроить команду push
# Другими словами, указать сервер, куда должны пушиться изменения 


git remote
# Список настроенных удалённых репозиториев (кратко, только имя)


git remote -v
# Список настроенных удалённых репозиториев (подробно, имя и адрес сервера)


git branch -vv
# Список веток в информацией о том, с какими из них установлен upstream


git clone https://github.com/mouse71rus/GitLearning.git
# Клонировать репозиторий
# Не нуждается в предварительной команде git init. Сразу git clone


git clone https://github.com/mouse71rus/GitLearning .
# Клонировать репозиторий в текущую папку
# Не нуждается в предварительной команде git init. Сразу git clone
# Точка в конце очень важна


git clone -c core.longpaths=true https://github.com/mouse71rus/GitLearning.git
# Клонировать репозиторий с фиксом проблемы с длинными путями
# Не нуждается в предварительной команде git init. Сразу git clone


git fetch origin
git checkout -b LocalBranch origin/RemoteBranch 
# Стянуть ещё ветку из удалённого репозитория
# origin - имя сервера
# RemoteBranch - имя ветки на удалённом репозитории
# LocalBranch - имя ветки на локальном репозитории (ветка будет создана)


git checkout master
git merge branchOfAdmin
# Слияние ветки master с веткой branchOfAdmin.
# Ветка master должна быть предварительно выбрана.


git merge --abort
# Отмена слияния


gitk
# Просмотр графа изменений


gitk --all
# Просмотр графа изменений по всем веткам


git tag
# Вывод списка тегов


git tag -a v1.4 -m 'my version 1.4'
# Создать тег (метку) v1.4 для текущего коммита и добавить комментарий "my version 1.4"


git tag v1.6
# Создать легковесный тег (метку) v1.6 для текущего коммита


git tag -a v9.0.0 1cbcb5724 -m "Iterator pattern"
# Добавление нового тега к коммиту 1cbcb5724 с тегом v9.0.0


git show v1.4
# Посмотреть данные тега v1.4 вместе с привязанном к нему коммиту


git push origin v1.5
# Отправить тег v1.5 на удалённый сервер origin
#
# По умолчанию, команда git push не отправляет теги на удалённые сервера. 
# После создания теги нужно отправлять явно на удалённый сервер.


git push origin --tags
# Отправить все теги на удалённый сервер origin


git tag -d v1.4
# Удалить тег v1.4 из локального репозитория


git push origin --delete v1.4
# Удалить тег v1.4 из удалённого репозитория


git checkout v2.0.0
# Перейти к тегу (метке)
# По сути переход помеченному коммиту


git stash
# Отложить изменения (только неиндексированные) на потом
# Не влитые изменения будут храниться в стеке


git stash save
# Отложить все индексированные и неиндексированные изменения на потом


git stash list
# Показать все изменения в стеке


git stash show
# показать последнее изменение в стеке (патч)


git stash apply
# Применить последнее изменение из стека к текущей рабочей копии


git stash drop
# Удалить последнее изменение в стеке


git stash pop
# Применить последнее изменение из стека к текущей рабочей копии и удалить его из стека


git stash clear
# Очистить стек изменений


git submodule add git@github.com:mouse71rus/GitLearning.Submodule.git
# Добавить submodule


git submodule update --remote
# Обновить все submodule


git clone https://github.com/mouse71rus/GitLearning.git
git submodule update --init
# Получить submodule после клонирования репозитория


cd GitLearning.Submodule
git commit -a -m "Added something.."
cd ..
git commit -a -m "Отправка измений submodule на сервер + публикация своих правок"
git push --recurse-submodules=on-demand
# Отправка измений submodule на сервер + публикация своих правок


git submodule update --remote
git submodule deinit -f .
git submodule update --init
# Отменить git submodule update --remote и вернуться к состоянию, соответсвующее remote репозиторию


ssh-keygen
# Генерация ssh ключа
# Пароль можно не указывать


ssh-keygen -o
# Генерация ssh ключа
# Если вы решили использовать пароль для приватного ключа, то настоятельно рекомендуется использовать опцию -o, которая позволяет сохранить ключ в формате, более устойчивом ко взлому методом подбора, чем стандартный формат.


git revert -m 1 09a12ee
# Отмена предыдущего коммита
# При отмене создаётся новый коммит, который откатывает сделанные в предыдущем коммите изменения
# Может пригодиться, когда замержил ветку и сделал push. Необходимо будет указать хеш удаляемого коммита
# Но позже повторно подлить ветку не выйдет без дополнительный действий..